Ntrain = 300
MSE_test = []
MSE_train = []
MSE_SL_test = []
MSE_SL_train = []
lamb = np.logspace(-10,10,10)
degree = [2,3,4,5,6]
features = data[:,:-1]
for deg in degree:
    features = np.concatenate((features,data[:,:-1]**deg),axis=1)
Xtrain = stats.zscore(features[:Ntrain,:],axis=0)
ytrain = data[:Ntrain,-1][...,None]
Xtest = stats.zscore(features[Ntrain:,:],axis=0)
ytest = data[Ntrain:,-1][...,None]
Xtrain_mt = np.concatenate((np.ones((len(Xtrain),1)),Xtrain),axis=1)
Xtest_mt = np.concatenate((np.ones((len(Xtest),1)),Xtest),axis=1)
for lam in lamb:
    beta = Ridge_y_hat(Xtrain_mt, ytrain,lam)
    reg = sl.Ridge(lam).fit(Xtrain,ytrain)
    MSE_train.append(MSE(ytrain,beta,Xtrain_mt))
    MSE_test.append(MSE(ytest,beta,Xtest_mt))
    MSE_SL_train.append(mean_squared_error(ytrain, reg.predict(Xtrain)))
    MSE_SL_test.append(mean_squared_error(ytest,reg.predict(Xtest)))
plt.plot(lamb,MSE_train,color='green',label='train',marker='D')
plt.plot(lamb,MSE_test,color='cyan',label='test',marker='D')
plt.plot(lamb,MSE_SL_train,color='b',label='train')
plt.plot(lamb,MSE_SL_test,color='r',label='test')
plt.xscale('log')
plt.legend(frameon=False,fontsize=fontsize_label)
plt.ylabel('MSE',fontsize=fontsize_label)
plt.xlabel(r'$\lambda$',fontsize=fontsize_label)
plt.savefig('4_4_fig.png')
